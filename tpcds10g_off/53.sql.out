

 Limit
   ->  Sort
         Sort Key: tmp1.avg_quarterly_sales, tmp1.sum_sales, tmp1.i_manufact_id
         ->  Subquery Scan on tmp1
               Filter: (CASE WHEN (tmp1.avg_quarterly_sales > '0'::numeric) THEN (abs((tmp1.sum_sales - tmp1.avg_quarterly_sales)) / tmp1.avg_quarterly_sales) ELSE NULL::numeric END > 0.1)
               ->  WindowAgg
                     ->  GroupAggregate
                           Group Key: item.i_manufact_id, date_dim.d_qoy
                           ->  Gather Merge
                                 Workers Planned: 2
                                 ->  Sort
                                       Sort Key: item.i_manufact_id, date_dim.d_qoy
                                       ->  Hash Join
                                             Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                             ->  Nested Loop
                                                   ->  Nested Loop
                                                         ->  Parallel Seq Scan on item
                                                               Filter: (((i_category = ANY ('{Books,Children,Electronics}'::bpchar[])) AND (i_class = ANY ('{personal,portable,reference,self-help}'::bpchar[])) AND (i_brand = ANY ('{"scholaramalgamalg #14","scholaramalgamalg #7","exportiunivamalg #9","scholaramalgamalg #9"}'::bpchar[]))) OR ((i_category = ANY ('{Women,Music,Men}'::bpchar[])) AND (i_class = ANY ('{accessories,classical,fragrances,pants}'::bpchar[])) AND (i_brand = ANY ('{"amalgimporto #1","edu packscholar #1","exportiimporto #1","importoamalg #1"}'::bpchar[]))))
                                                         ->  Bitmap Heap Scan on store_sales
                                                               Recheck Cond: (item.i_item_sk = ss_item_sk)
                                                               ->  Bitmap Index Scan on store_sales_pkey
                                                                     Index Cond: (ss_item_sk = item.i_item_sk)
                                                   ->  Memoize
                                                         Cache Key: store_sales.ss_sold_date_sk
                                                         Cache Mode: logical
                                                         ->  Index Scan using date_dim_pkey on date_dim
                                                               Index Cond: (d_date_sk = store_sales.ss_sold_date_sk)
                                                               Filter: (d_month_seq = ANY ('{1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200}'::integer[]))
                                             ->  Hash
                                                   ->  Seq Scan on store
(30 rows)

